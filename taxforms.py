###AUTOGENERATED via m4. Please edit the sources.

#in python at the moment, situations are just plain booleans
def Situation(x):
    return x

def fstatus():
    return status

#tax rate schedules---a reformat from the JS version above.
def tax_table(inval):
    filing_status = fstatus()

    if filing_status == "single":
        cuts=[0, 11600, 47150, 100525, 191950, 243725, 609350, 1e20]
    if filing_status == "married filing separately":
        cuts=[0, 11600, 47150, 100525, 191950, 243725, 365600, 1e20]
    if filing_status == "married filing jointly":
        cuts=[0, 23200, 94300, 201050, 383900, 487450, 731200, 1e20]
    if filing_status == "head of household":
        cuts=[0, 16550, 63100, 100500, 191950, 243700, 609350,1e20]

    rate=[0.1, 0.12, 0.22 , 0.24 ,0.32, 0.35, 0.37]
    i=0
    total=0
    while inval>=cuts[i]:
        # Finds how much of inval (income) falls into that bracket
        total = total + (min(inval,cuts[i+1]) - cuts[i])*rate[i]
        i = i+1
    return total

# The tax tables break income into $50 ranges, then uses the midpoint.
def tax_calc(inval):
    if inval == 0: return 0
    if inval >=100000: return tax_table(inval)
    return tax_table(round(inval/50)*50 + 25)

def std_ded_fn():
    over65ct = Situation(over_65) + Situation(spouse_over_65)
    if fstatus() == "single":
         if (over65ct==0):  return 14600
         if (over65ct==1):  return 16550
         else: return 18500

    if fstatus() == "married filing jointly":
         if (over65ct==0): return 29200
         if (over65ct==1): return 30750
         if (over65ct==2): return 32300
         if (over65ct==3): return 33850
         else:  return 35400

    if fstatus() == "married filing separately":
         if (over65ct==0): return 14600
         if (over65ct==1): return 16150
         if (over65ct==2): return 17700
         if (over65ct==3): return 19250
         else:  return 20800

    if fstatus() == "head of household":
         if (over65ct==0): return 21900
         if (over65ct==1): return 23850
         else: return 25800



def eitc(income, kids):
    #See https://www.taxpolicycenter.org/statistics/eitc-parameters
    # Or, search the internet for the phrase "For taxable years beginning in 20xx, the following amounts are used to determine the earned income credit under ยง 32(b)."
    # For 2019: https://www.irs.gov/irb/2018-49_IRB
    # For 2020: https://www.irs.gov/irb/2019-47_IRB
    # For 2021: https://www.irs.gov/pub/irs-drop/rp-19-44.pdf
    # For 2022: https://www.taxpolicycenter.org/statistics/eitc-parameters
    # In the footnotes of that page, you'll find sources. For 23, I went straigtht to the IRB: https://www.irs.gov/pub/irs-irbs/irb22-45.pdf
    #plateu start, plateu value, plateu end, zero point, phaseout for married joint, phaseout end for mj

    data=[[8260, 632, 10330, 18591,    17250, 25511],
          [12390, 4213, 22720, 49084, 29640, 56004],
          [17400, 6960, 22720, 55768, 29640, 62688],
          [17400, 7830, 22720, 59899, 29640, 66819]]
    row=kids if kids <=3 else 3

    plateu_start=0
    plateu_value=1

    if status=="married filing separately": return 0
    if status=="married filing jointly":
        phaseout_start=4
        phaseout_end=5
    else:
        phaseout_start=2
        phaseout_end=3

    if income < 0: print("Negative income! (%s) Please fix." % (income,))
    if income >= data[row][phaseout_end]: return 0
    if income >= data[row][phaseout_start]:
        return round(100*data[row][plateu_value]*(1-(income-data[row][phaseout_start])
                                            /(data[row][phaseout_end]-data[row][phaseout_start])))/100
    if income <= data[row][plateu_start]:
        return round(income*data[row][plateu_value]/data[row][plateu_start])/100;
    return data[row][plateu_value]

def actc(limited_unused, scaled_income, ss_med, eitc):
    if kids >=3:
        if scaled_income==0:
            return 0
        else:
            return min(limited_unused, scaled_income)

    #Did you have a lot of soc sec/Medicare withheld, and EITC still isn't covering it?
    #We'll up the credit to cover that if it's more than your scaled income.
    if limited_unused <= scaled_income:
        return min(limited_unused, scaled_income)
    else:
        return min(max(ss_med-eitc, scaled_income), limited_unused)


# CTC
def thousandkids():
    return kids*2000 + dependents*500

def seventeenkids():
    return kids*1700

def Floor(x):
    return int(x)

from math import ceil
def Ceil(x):
    return ceil(x)

def ctc_status(agi):
    ded=0;
    status = fstatus();
    if (status=="married filing jointly"): ded=400000
    else: ded=200000
    diff = max(agi-ded, 0)
    return ceil(diff/1000.)*1000*0.05


def get_amt_exemption(income):
    if (status=="single" or status=="head of household") and income < 609350:
        return 85700
    if (status=="married filing jointly") and income < 1218700:
        return 133300
    if (status=="married filing separately") and income < 609350:
        return 66650
    print("AMT exemption is partially implemented.")
    return 0

def get_tamt(income):
    if income<=0: return 0
    if status=="married filing separately":
        return income * (0.26 if income <=116300  else 0.28) - 2326
    else:
        return income * (0.26 if income <=232600 else 0.28) - 4652

def med_expenses(expenses, agi):
    if (not (over_65 or  spouse_over_65)): return 0
    return max(min(expenses, 0.025*agi), 0)


deps = dict (
f1040sch1_state_tax_refunds = [],
f1040sch1_alimony = [],
f1040sch1_sched_c = ["f1040_sched_c_net_pl", ],
f1040sch1_sale_of_biz = [],
f1040sch1_rr_income = ["f1040_sched_e_rr_income", ],
f1040sch1_farm_income = [],
f1040sch1_unemployment = [],
f1040sch1_other_in = [],
f1040sch1_sch1_magi_subtotal = ["f1040_tax_refund_ws_taxable_refund", "f1040sch1_state_tax_refunds", "f1040sch1_alimony", "f1040sch1_sched_c", "f1040sch1_sale_of_biz", "f1040sch1_farm_income", "f1040sch1_unemployment", "f1040sch1_other_in", ],
f1040sch1_subtractions_divider = [],
f1040sch1_hsa_deduction = [],
f1040sch1_self_employment_deductible = ["sched_se_se_tax", ],
f1040sch1_ira_deduction = [],
f1040sch1_student_loan_interest_ded = ["student_loan_ws_1040_final_credit", ],
f1040sch1_other_adjustments = [],
f1040sch1_subtractions_from_income_wo_student_loans = ["f1040sch1_hsa_deduction", "f1040sch1_self_employment_deductible", "f1040sch1_ira_deduction", "f1040sch1_other_adjustments", ],
f1040sch1_subtractions_from_income = ["f1040sch1_hsa_deduction", "f1040sch1_self_employment_deductible", "f1040sch1_ira_deduction", "f1040sch1_student_loan_interest_ded", "f1040sch1_other_adjustments", ],
f1040_wages = [],
f1040_interest = [],
f1040_qualified_dividends = [],
f1040_dividends = [],
f1040_iras = [],
f1040_pensions = [],
f1040_taxable_ss_benefits = [],
f1040_capital_gains = [],
f1040_MAGI = ["f1040sch1_sch1_magi_subtotal", "f1040_wages", "f1040_interest", "f1040_dividends", "f1040_iras", "f1040_pensions", "f1040_taxable_ss_benefits", "f1040_capital_gains", ],
f1040_total_in = ["f1040_MAGI", "f1040sch1_rr_income", ],
f1040_AGI = ["f1040_total_in", "f1040sch1_subtractions_from_income", ],
f1040_std_deduction = [],
f1040_deductions = ["f1040_std_deduction", "f1040_sched_a_total_itemized_deductions", ],
f1040_qbi = [],
f1040_taxable_income = ["f1040_AGI", "f1040_deductions", "f1040_qbi", ],
f1040_base_tax = ["f1040_taxable_income", "qualified_dividends_ws_total_tax", ],
f1040_tax_plus_amt_and_repayment = ["f1040_base_tax", "f1040sch2_sch2_total", ],
f1040_credits = ["f1040sch3_nonrefundable_total", "ctc_sch8812_I_ctc", ],
f1040_tax_minus_credits = ["f1040_tax_plus_amt_and_repayment", "f1040_credits", ],
f1040_postcredit_taxes = ["f1040sch2_se_tax", "f1040sch2_other_taxes", ],
f1040_total_tax = ["f1040_tax_minus_credits", "f1040_postcredit_taxes", ],
f1040_federal_tax_withheld = [],
f1040_eitc = ["f1040_AGI", ],
f1040_actc = ["ctc_sch8812_IIA_refundable_ctc", ],
f1040_ed_tc = ["f8863_refundable_credit", ],
f1040_other_tc = [],
f1040_total_payments = ["f1040_federal_tax_withheld", "f1040_eitc", "f1040_actc", "f1040_ed_tc", "f1040_other_tc", ],
f1040_refund = ["f1040_total_payments", "f1040_total_tax", ],
f1040_tax_owed = ["f1040_total_tax", "f1040_total_payments", ],
f1040sch2_amt = ["f6251_amt", ],
f1040sch2_credit_repayment = [],
f1040sch2_sch2_total = ["f1040sch2_amt", "f1040sch2_credit_repayment", ],
f1040sch2_se_tax = ["sched_se_se_tax", ],
f1040sch2_other_taxes = [],
f1040sch3_ftc = [],
f1040sch3_dependent_care = [],
f1040sch3_ed_credits = ["f8863_nonrefundable_credit", ],
f1040sch3_retirement_savings = [],
f1040sch3_elderly_disabled_credits = [],
f1040sch3_alt_motor_vehicle = [],
f1040sch3_plug_in_motor_vehicle = [],
f1040sch3_nonrefundable_total = ["f1040sch3_ftc", "f1040sch3_dependent_care", "f1040sch3_retirement_savings", "f1040sch3_elderly_disabled_credits", "f1040sch3_alt_motor_vehicle", "f1040sch3_plug_in_motor_vehicle", "f1040sch3_ed_credits", ],
student_loan_ws_1040_student_loan_interest = [],
student_loan_ws_1040_loans_maxed = ["student_loan_ws_1040_student_loan_interest", ],
student_loan_ws_1040_phase_out_pct = ["f1040_total_in", "f1040sch1_subtractions_from_income_wo_student_loans", ],
student_loan_ws_1040_phased_out_loans = ["student_loan_ws_1040_loans_maxed", "student_loan_ws_1040_phase_out_pct", ],
student_loan_ws_1040_final_credit = ["student_loan_ws_1040_loans_maxed", "student_loan_ws_1040_phased_out_loans", ],
ctc_sch8812_I_two_thousand_per_child = [],
ctc_sch8812_I_ctc_subtraction = ["f1040_AGI", ],
ctc_sch8812_I_credit_remaining = ["ctc_sch8812_I_two_thousand_per_child", "ctc_sch8812_I_ctc_subtraction", ],
ctc_sch8812_I_tax_minus_some_credits = ["f1040_base_tax", "f1040sch3_ftc", "f1040sch3_dependent_care", "f1040sch3_ed_credits", "f1040sch3_retirement_savings", "f1040sch3_elderly_disabled_credits", "f1040sch3_alt_motor_vehicle", "f1040sch3_plug_in_motor_vehicle", ],
ctc_sch8812_I_ctc = ["ctc_sch8812_I_tax_minus_some_credits", "ctc_sch8812_I_credit_remaining", ],
ctc_sch8812_IIA_unused_ctc = ["ctc_sch8812_I_credit_remaining", "ctc_sch8812_I_ctc", ],
ctc_sch8812_IIA_seventeen_kids = [],
ctc_sch8812_IIA_limited_unused = ["ctc_sch8812_IIA_unused_ctc", "ctc_sch8812_IIA_seventeen_kids", ],
ctc_sch8812_IIA_scaled_earned_income = ["f1040_wages", ],
ctc_sch8812_IIA_ss_and_medicare_withheld = [],
ctc_sch8812_IIA_refundable_ctc = ["ctc_sch8812_IIA_limited_unused", "ctc_sch8812_IIA_scaled_earned_income", "f1040sch1_self_employment_deductible", "ctc_sch8812_IIA_ss_and_medicare_withheld", "f1040_eitc", ],
f1040_tax_refund_ws_last_year_refund = [],
f1040_tax_refund_ws_last_year_5d = [],
f1040_tax_refund_ws_last_year_limited_deductions = [],
f1040_tax_refund_ws_last_year_reduced = ["f1040_tax_refund_ws_last_year_5d", "f1040_tax_refund_ws_last_year_limited_deductions", ],
f1040_tax_refund_ws_last_year_post_limit = ["f1040_tax_refund_ws_last_year_refund", "f1040_tax_refund_ws_last_year_reduced", ],
f1040_tax_refund_ws_last_year_total_deductions = [],
f1040_tax_refund_ws_almost_std_deduction = [],
f1040_tax_refund_ws_srblind = [],
f1040_tax_refund_ws_itemized_over_std = ["f1040_tax_refund_ws_last_year_total_deductions", "f1040_tax_refund_ws_almost_std_deduction", "f1040_tax_refund_ws_srblind", ],
f1040_tax_refund_ws_taxable_refund = ["f1040_tax_refund_ws_itemized_over_std", "f1040_tax_refund_ws_last_year_post_limit", ],
qualified_dividends_ws_qualified_dividends_and_gains = ["f1040_qualified_dividends", "f1040_capital_gains", ],
qualified_dividends_ws_income_minus_gains = ["f1040_taxable_income", "qualified_dividends_ws_qualified_dividends_and_gains", ],
qualified_dividends_ws_limitation = [],
qualified_dividends_ws_limited_income = ["f1040_taxable_income", "qualified_dividends_ws_limitation", ],
qualified_dividends_ws_alt_limited_income = ["qualified_dividends_ws_limited_income", "qualified_dividends_ws_income_minus_gains", ],
qualified_dividends_ws_untaxed = ["qualified_dividends_ws_limited_income", "qualified_dividends_ws_alt_limited_income", ],
qualified_dividends_ws_min_ded_or_gains_minus_zero = ["f1040_taxable_income", "qualified_dividends_ws_income_minus_gains", "qualified_dividends_ws_untaxed", ],
qualified_dividends_ws_relimited_qualified = ["qualified_dividends_ws_min_ded_or_gains_minus_zero", "f1040_taxable_income", "qualified_dividends_ws_income_minus_gains", "qualified_dividends_ws_untaxed", ],
qualified_dividends_ws_income_minus_fifteen = ["f1040_taxable_income", "qualified_dividends_ws_qualified_dividends_and_gains", "qualified_dividends_ws_untaxed", "qualified_dividends_ws_relimited_qualified", ],
qualified_dividends_ws_nongains_tax = ["qualified_dividends_ws_income_minus_gains", ],
qualified_dividends_ws_total_tax = ["qualified_dividends_ws_relimited_qualified", "qualified_dividends_ws_income_minus_fifteen", "qualified_dividends_ws_nongains_tax", ],
f6251_taxable_income = ["f1040_AGI", "f1040_deductions", "f1040_qbi", ],
f6251_taxes_deducted = ["f1040_sched_a_total_itemized_deductions", "f1040_sched_a_total_taxes_deducted", "f1040_std_deduction", ],
f6251_amt_refund_deduction = ["f1040_tax_refund_ws_taxable_refund", ],
f6251_nold = [],
f6251_amt_income = ["f6251_taxable_income", "f6251_taxes_deducted", "f6251_amt_refund_deduction", "f6251_nold", ],
f6251_amt_exemption = ["f6251_amt_income", ],
f6251_amt_in_minus_exemption = ["f6251_amt_income", "f6251_amt_exemption", ],
f6251_amt_preftc = ["f6251_amt_in_minus_exemption", ],
f6251_amt_ftc = [],
f6251_amt_tentative = ["f6251_amt_preftc", "f6251_amt_ftc", ],
f6251_tax_from_1040 = ["f1040_base_tax", "f1040sch2_credit_repayment", "f1040sch3_ftc", ],
f6251_amt = ["f6251_amt_tentative", "f6251_tax_from_1040", ],
f8582_ws1_8582_net_gain = ["f1040_sched_e_rents_received", "f1040_sched_e_total_rental_expenses", ],
f8582_ws1_8582_net_loss = ["f1040_sched_e_rents_received", "f1040_sched_e_total_rental_expenses", ],
f8582_ws1_8582_prior_loss = [],
f8582_ws1_8582_d = ["f8582_ws1_8582_net_gain", "f8582_ws1_8582_net_loss", "f8582_ws1_8582_prior_loss", ],
f8582_div_85821 = [],
f8582_div_85822 = [],
f8582_f8582_net_in = ["f8582_ws1_8582_net_gain", ],
f8582_f8582_net_loss = ["f8582_ws1_8582_net_loss", ],
f8582_f8582_carryover = ["f8582_ws1_8582_prior_loss", "f8582_ws1_8582_prior_loss", "f8582_ws1_8582_prior_loss", ],
f8582_f8582_total_real_in = ["f8582_f8582_net_in", "f8582_f8582_net_loss", "f8582_f8582_carryover", ],
f8582_f8582_commercial_revitalization = [],
f8582_f8582_passive_activities = ["f8582_f8582_total_real_in", ],
f8582_f8582_total_in = ["f8582_f8582_total_real_in", "f8582_f8582_commercial_revitalization", "f8582_f8582_passive_activities", ],
f8582_f8582_min = ["f8582_f8582_total_real_in", "f8582_f8582_total_in", ],
f8582_f8582_half = ["f1040_MAGI", ],
f8582_allowed_extra_real_losses = ["f8582_f8582_min", "f8582_f8582_half", ],
f8582_allowed_real_losses = ["f8582_allowed_extra_real_losses", "f8582_f8582_net_in", ],
f8582_carryover_to_next_year = ["f8582_ws1_8582_prior_loss", "f8582_total_losses_8582", ],
f8582_total_losses_8582 = ["f8582_f8582_total_real_in", "f8582_f8582_net_loss", "f8582_ws1_8582_prior_loss", "f8582_allowed_real_losses", ],
f8863_pt3_divider = [],
f8863_education_expenses_1 = [],
f8863_scaled_education_expenses_1 = ["f8863_education_expenses_1", ],
f8863_rescaled_education_expenses_1 = ["f8863_education_expenses_1", "f8863_education_expenses_1", "f8863_scaled_education_expenses_1", ],
f8863_education_expenses_2 = [],
f8863_scaled_education_expenses_2 = ["f8863_education_expenses_2", ],
f8863_rescaled_education_expenses_2 = ["f8863_education_expenses_2", "f8863_education_expenses_2", "f8863_scaled_education_expenses_2", ],
f8863_education_expenses_3 = [],
f8863_scaled_education_expenses_3 = ["f8863_education_expenses_3", ],
f8863_rescaled_education_expenses_3 = ["f8863_education_expenses_3", "f8863_education_expenses_3", "f8863_scaled_education_expenses_3", ],
f8863_adjusted_qualified_expenses = [],
f8863_pt1_divider = [],
f8863_total_limited_expenses = ["f8863_rescaled_education_expenses_1", "f8863_rescaled_education_expenses_2", "f8863_rescaled_education_expenses_3", ],
f8863_baseline = [],
f8863_ninety_k_minus_agi = ["f8863_baseline", "f1040_AGI", ],
f8863_fraction = ["f8863_ninety_k_minus_agi", ],
f8863_unscaled_credit = ["f8863_total_limited_expenses", "f8863_fraction", ],
f8863_under_24 = [],
f8863_refundable_credit = ["f8863_under_24", "f8863_unscaled_credit", ],
f8863_pt2_divider = [],
f8863_remaining_credit = ["f8863_unscaled_credit", "f8863_refundable_credit", ],
f8863_aqe = ["f8863_adjusted_qualified_expenses", ],
f8863_baseline2 = [],
f8863_fraction2 = ["f8863_baseline2", "f1040_AGI", ],
f8863_frac_allowed = ["f8863_fraction2", "f8863_aqe", ],
f8863_nonrefundable_credit = ["f8863ws_diff", "f8863ws_credit_sum", ],
f8863ws_credit_sum = ["f8863_remaining_credit", "f8863_frac_allowed", ],
f8863ws_tax = ["f1040_tax_plus_amt_and_repayment", ],
f8863ws_other_credits = ["f1040sch3_ftc", "f1040sch3_dependent_care", "f1040sch3_elderly_disabled_credits", ],
f8863ws_diff = ["f8863ws_tax", "f8863ws_other_credits", ],
f1040_sched_a_medical_expenses = [],
f1040_sched_a_agi_scaled = ["f1040_AGI", ],
f1040_sched_a_excess_medical = ["f1040_sched_a_medical_expenses", "f1040_sched_a_agi_scaled", ],
f1040_sched_a_local_taxes = [],
f1040_sched_a_real_estate_taxes = [],
f1040_sched_a_property_taxes = [],
f1040_sched_a_salt_capped = ["f1040_sched_a_local_taxes", "f1040_sched_a_real_estate_taxes", "f1040_sched_a_property_taxes", ],
f1040_sched_a_other_taxes = [],
f1040_sched_a_total_taxes_deducted = ["f1040_sched_a_salt_capped", "f1040_sched_a_other_taxes", ],
f1040_sched_a_reported_mort_interest = [],
f1040_sched_a_unreported_mort_interest = [],
f1040_sched_a_unreported_mort_points = [],
f1040_sched_a_investment_interest = [],
f1040_sched_a_total_interest_deduction = ["f1040_sched_a_reported_mort_interest", "f1040_sched_a_unreported_mort_interest", "f1040_sched_a_unreported_mort_points", "f1040_sched_a_investment_interest", ],
f1040_sched_a_charity_cash = [],
f1040_sched_a_charity_noncash = [],
f1040_sched_a_charity_carryover = [],
f1040_sched_a_charity_total = ["f1040_sched_a_charity_cash", "f1040_sched_a_charity_noncash", "f1040_sched_a_charity_carryover", ],
f1040_sched_a_casualty_or_theft_losses = [],
f1040_sched_a_employee_expenses = [],
f1040_sched_a_tax_prep_fees = [],
f1040_sched_a_other_work_expenses = [],
f1040_sched_a_expenses_minus_agi_slice = ["f1040_sched_a_employee_expenses", "f1040_sched_a_tax_prep_fees", "f1040_sched_a_other_work_expenses", "f1040_AGI", ],
f1040_sched_a_other_deductions = [],
f1040_sched_a_total_itemized_deductions = ["f1040_sched_a_excess_medical", "f1040_sched_a_total_taxes_deducted", "f1040_sched_a_total_interest_deduction", "f1040_sched_a_charity_total", "f1040_sched_a_casualty_or_theft_losses", "f1040_sched_a_expenses_minus_agi_slice", "f1040_sched_a_other_deductions", ],
f1040_sched_c_gross_rcpts = [],
f1040_sched_c_returns_and_allowances = [],
f1040_sched_c_cogs = [],
f1040_sched_c_other_income = [],
f1040_sched_c_gross_income = ["f1040_sched_c_gross_rcpts", "f1040_sched_c_returns_and_allowances", "f1040_sched_c_cogs", "f1040_sched_c_other_income", ],
f1040_sched_c_expenses = [],
f1040_sched_c_home_expenses = [],
f1040_sched_c_net_pl = ["f1040_sched_c_gross_income", "f1040_sched_c_expenses", "f1040_sched_c_home_expenses", ],
sched_se_in_from_sch_c = ["f1040_sched_c_net_pl", ],
sched_se_net_pl_reduced = ["sched_se_in_from_sch_c", "sched_se_in_from_sch_c", "sched_se_in_from_sch_c", ],
sched_se_ss_wages = [],
sched_se_distance_to_max = ["sched_se_ss_wages", ],
sched_se_twelve_pct = ["sched_se_distance_to_max", "sched_se_net_pl_reduced", ],
sched_se_two_pct = ["sched_se_net_pl_reduced", ],
sched_se_se_tax = ["sched_se_twelve_pct", "sched_se_two_pct", ],
f1040_sched_e_rents_received = [],
f1040_sched_e_royalties_received = [],
f1040_sched_e_rental_advertising = [],
f1040_sched_e_rental_auto_and_travel = [],
f1040_sched_e_rental_cleaning_and_maintenance = [],
f1040_sched_e_rental_fees = [],
f1040_sched_e_rental_mortgage_interest = [],
f1040_sched_e_rental_other_interest = [],
f1040_sched_e_rental_repairs_supplies = [],
f1040_sched_e_rental_taxes = [],
f1040_sched_e_rental_utilities = [],
f1040_sched_e_rental_depreciation = ["f4562_rental_property_depreciation", ],
f1040_sched_e_rental_other_expenses = [],
f1040_sched_e_royalty_expenses = [],
f1040_sched_e_total_rental_expenses = ["f1040_sched_e_rental_advertising", "f1040_sched_e_rental_auto_and_travel", "f1040_sched_e_rental_cleaning_and_maintenance", "f1040_sched_e_rental_fees", "f1040_sched_e_rental_mortgage_interest", "f1040_sched_e_rental_other_interest", "f1040_sched_e_rental_repairs_supplies", "f1040_sched_e_rental_taxes", "f1040_sched_e_rental_utilities", "f1040_sched_e_rental_depreciation", "f1040_sched_e_rental_other_expenses", ],
f1040_sched_e_net_rents = ["f1040_sched_e_rents_received", "f1040_sched_e_total_rental_expenses", ],
f1040_sched_e_net_royalties = ["f1040_sched_e_royalties_received", "f1040_sched_e_royalty_expenses", ],
f1040_sched_e_deductible_rr_losses = ["f8582_total_losses_8582", ],
f1040_sched_e_post_8582_net_rents = ["f1040_sched_e_net_rents", "f1040_sched_e_net_rents", "f1040_sched_e_deductible_rr_losses", "f1040_sched_e_deductible_rr_losses", ],
f1040_sched_e_sched_e_income = ["f1040_sched_e_post_8582_net_rents", "f1040_sched_e_net_royalties", ],
f1040_sched_e_rr_losses = ["f1040_sched_e_post_8582_net_rents", "f1040_sched_e_net_royalties", ],
f1040_sched_e_rr_income = ["f1040_sched_e_sched_e_income", "f1040_sched_e_rr_losses", ],
f4562_rental_property_value = [],
f4562_rental_property_depreciation = ["f4562_rental_property_value", ],
 )

cell_list = dict(
f1040sch1_state_tax_refunds = cell("Taxable state refunds", 1, "", flag="u    ", name="f1040sch1_state_tax_refunds", form="f1040sch1"),
f1040sch1_alimony = cell("alimony income received", 2.1, "", flag="u    ", name="f1040sch1_alimony", form="f1040sch1"),
f1040sch1_sched_c = cell("Schedule C business income", 3, "Cv('f1040_sched_c_net_pl')", flag="self_emp    ", name="f1040sch1_sched_c", form="f1040sch1"),
f1040sch1_sale_of_biz = cell("Sale of business property (f4797)", 4, "", flag="u    ", name="f1040sch1_sale_of_biz", form="f1040sch1"),
f1040sch1_rr_income = cell("Rents and royalties from Schedule E", 5, "Cv('f1040_sched_e_rr_income')", flag="have_rr    ", name="f1040sch1_rr_income", form="f1040sch1"),
f1040sch1_farm_income = cell("Farm income from Schedule F", 6, "", flag="u    ", name="f1040sch1_farm_income", form="f1040sch1"),
f1040sch1_unemployment = cell("Unemployment compensation", 7, "", flag="u    ", name="f1040sch1_unemployment", form="f1040sch1"),
f1040sch1_other_in = cell("other income (see Sch 1 for the list)", 8, "", flag="u    ", name="f1040sch1_other_in", form="f1040sch1"),
f1040sch1_sch1_magi_subtotal = cell("Schedule 1 subtotal w/o Rents/Royalties", 9, "Cv('f1040_tax_refund_ws_taxable_refund') +          Cv('f1040sch1_state_tax_refunds') + Cv('f1040sch1_alimony') + Cv('f1040sch1_sched_c') + Cv('f1040sch1_sale_of_biz') + Cv('f1040sch1_farm_income') + Cv('f1040sch1_unemployment') + Cv('f1040sch1_other_in') + 0    ", flag="", name="f1040sch1_sch1_magi_subtotal", form="f1040sch1"),
f1040sch1_subtractions_divider = cell(">>>>>>>>>>>> Subtractions                                   ", 22.9, "0", flag="", name="f1040sch1_subtractions_divider", form="f1040sch1"),
f1040sch1_hsa_deduction = cell("Health Savings Account deduction", 13, "", flag="u    ", name="f1040sch1_hsa_deduction", form="f1040sch1"),
f1040sch1_self_employment_deductible = cell("Deductible part of self-employment tax (Sch SE)", 15, "Cv('sched_se_se_tax')*0.5        ", flag="self_emp    ", name="f1040sch1_self_employment_deductible", form="f1040sch1"),
f1040sch1_ira_deduction = cell("IRA deduction", 20, "", flag="u    ", name="f1040sch1_ira_deduction", form="f1040sch1"),
f1040sch1_student_loan_interest_ded = cell("Student loan interest deduction", 21, "Cv('student_loan_ws_1040_final_credit')", flag="s_loans    ", name="f1040sch1_student_loan_interest_ded", form="f1040sch1"),
f1040sch1_other_adjustments = cell("All other adjustments anywhere on Sch2 part II", 25, "", flag="u    ", name="f1040sch1_other_adjustments", form="f1040sch1"),
f1040sch1_subtractions_from_income_wo_student_loans = cell("Adjustments excluding student loans", 26.1, "Cv('f1040sch1_hsa_deduction') + Cv('f1040sch1_self_employment_deductible') + Cv('f1040sch1_ira_deduction') + Cv('f1040sch1_other_adjustments') + 0    ", flag="", name="f1040sch1_subtractions_from_income_wo_student_loans", form="f1040sch1"),
f1040sch1_subtractions_from_income = cell("Sum of adjustments to income", 26, "Cv('f1040sch1_hsa_deduction') + Cv('f1040sch1_self_employment_deductible') + Cv('f1040sch1_ira_deduction') + Cv('f1040sch1_student_loan_interest_ded') + Cv('f1040sch1_other_adjustments') + 0    ", flag="", name="f1040sch1_subtractions_from_income", form="f1040sch1"),
f1040_wages = cell("Wages, salaries, tips, etc. primarily from form W-2", 1, "", flag="u", name="f1040_wages", form="f1040"),
f1040_interest = cell("Taxable interest", 2.5, "", flag="u", name="f1040_interest", form="f1040"),
f1040_qualified_dividends = cell("Dividends qualifying for the long-term cap gains rate", 3.4, "", flag="u cap_gains", name="f1040_qualified_dividends", form="f1040"),
f1040_dividends = cell("all dividends", 3.5, "", flag="u", name="f1040_dividends", form="f1040"),
f1040_iras = cell("Taxable IRA distributions", 4.5, "", flag="u", name="f1040_iras", form="f1040"),
f1040_pensions = cell("Taxable pension distributions", 5.5, "", flag="u", name="f1040_pensions", form="f1040"),
f1040_taxable_ss_benefits = cell("Taxable social security benefits", 6.5, "", flag="u over_65 spouse_over_65", name="f1040_taxable_ss_benefits", form="f1040"),
f1040_capital_gains = cell("Capital gains from Schedule D", 7, "", flag="u cap_gains", name="f1040_capital_gains", form="f1040"),
f1040_MAGI = cell("Total income for MAGI (PI)", 0, "Cv('f1040sch1_sch1_magi_subtotal') + Cv('f1040_wages') + Cv('f1040_interest') + Cv('f1040_dividends') + Cv('f1040_iras') + Cv('f1040_pensions') + Cv('f1040_taxable_ss_benefits') + Cv('f1040_capital_gains') + 0    ", flag="", name="f1040_MAGI", form="f1040"),
f1040_total_in = cell("Total income", 9, "Cv('f1040_MAGI') + Cv('f1040sch1_rr_income')    ", flag="", name="f1040_total_in", form="f1040"),
f1040_AGI = cell("Adjusted gross income", 11, "max(Cv('f1040_total_in') - Cv('f1040sch1_subtractions_from_income'),0)", flag="critical    ", name="f1040_AGI", form="f1040"),
f1040_std_deduction = cell("Standard deductions", 12, "std_ded_fn()", flag="critical    ", name="f1040_std_deduction", form="f1040"),
f1040_deductions = cell("Deductions", 12, "max(Cv('f1040_std_deduction'), Cv('f1040_sched_a_total_itemized_deductions'))", flag="critical    ", name="f1040_deductions", form="f1040"),
f1040_qbi = cell("20% discount on qualified business income (f8995)", 13, "", flag="u    ", name="f1040_qbi", form="f1040"),
f1040_taxable_income = cell("Taxable income", 15, "max(Cv('f1040_AGI') - Cv('f1040_deductions') - Cv('f1040_qbi'), 0)", flag="critical    ", name="f1040_taxable_income", form="f1040"),
f1040_base_tax = cell("Tax", 16.1, "min(tax_calc(Cv('f1040_taxable_income')), Cv('qualified_dividends_ws_total_tax'))", flag="critical    ", name="f1040_base_tax", form="f1040"),
f1040_tax_plus_amt_and_repayment = cell("Tax plus Sch2", 18, "Cv('f1040_base_tax')+Cv('f1040sch2_sch2_total')    ", flag="", name="f1040_tax_plus_amt_and_repayment", form="f1040"),
f1040_credits = cell("CTC and Schedule 3, other credits", 19, "Cv('f1040sch3_nonrefundable_total') + Cv('ctc_sch8812_I_ctc')", flag="critical    ", name="f1040_credits", form="f1040"),
f1040_tax_minus_credits = cell("Tax minus credits", 22, "max(Cv('f1040_tax_plus_amt_and_repayment')-Cv('f1040_credits'), 0)", flag="critical    ", name="f1040_tax_minus_credits", form="f1040"),
f1040_postcredit_taxes = cell("Other taxes, incl. self-employment", 23, "Cv('f1040sch2_se_tax') + Cv('f1040sch2_other_taxes')", flag="itemizing self_emp", name="f1040_postcredit_taxes", form="f1040"),
f1040_total_tax = cell("Total tax", 24, "Cv('f1040_tax_minus_credits')+Cv('f1040_postcredit_taxes')        ", flag="", name="f1040_total_tax", form="f1040"),
f1040_federal_tax_withheld = cell("Federal income tax withheld from Forms W-2 and 1099", 25, "", flag="u", name="f1040_federal_tax_withheld", form="f1040"),
f1040_eitc = cell("Earned income credit (EIC)", 27, "eitc(Cv('f1040_AGI'), kids)        ", flag="", name="f1040_eitc", form="f1040"),
f1040_actc = cell("Refundable child tax credit", 28, "Cv('ctc_sch8812_IIA_refundable_ctc')", flag="kids        ", name="f1040_actc", form="f1040"),
f1040_ed_tc = cell("Refundable education credits", 29, "Cv('f8863_refundable_credit')", flag="s_loans        ", name="f1040_ed_tc", form="f1040"),
f1040_other_tc = cell("Other asst credits from Sch 3", 31, "", flag="u", name="f1040_other_tc", form="f1040"),
f1040_total_payments = cell("Total payments", 33, "Cv('f1040_federal_tax_withheld') + Cv('f1040_eitc') + Cv('f1040_actc') + Cv('f1040_ed_tc') + Cv('f1040_other_tc') + 0        ", flag="", name="f1040_total_payments", form="f1040"),
f1040_refund = cell("Refund", 34, "max(Cv('f1040_total_payments')-Cv('f1040_total_tax'), 0)", flag="critical        ", name="f1040_refund", form="f1040"),
f1040_tax_owed = cell("Tax owed", 37, "max(Cv('f1040_total_tax')-Cv('f1040_total_payments'), 0)", flag="critical        ", name="f1040_tax_owed", form="f1040"),
f1040sch2_amt = cell("Alternative minimum tax", 1, "Cv('f6251_amt')", flag="itemizing    ", name="f1040sch2_amt", form="f1040sch2"),
f1040sch2_credit_repayment = cell("Excess advance premium tax credit repayment", 2, "", flag="u itemizing    ", name="f1040sch2_credit_repayment", form="f1040sch2"),
f1040sch2_sch2_total = cell("Schedule 2 total", 3, "Cv('f1040sch2_amt')+Cv('f1040sch2_credit_repayment')", flag="itemizing    ", name="f1040sch2_sch2_total", form="f1040sch2"),
f1040sch2_se_tax = cell("Self-employment tax on Sch 2", 4, "Cv('sched_se_se_tax')", flag="self_emp    ", name="f1040sch2_se_tax", form="f1040sch2"),
f1040sch2_other_taxes = cell("Sum other taxes (besides self-employment)", 4, "", flag="u itemizing self_emp    ", name="f1040sch2_other_taxes", form="f1040sch2"),
f1040sch3_ftc = cell("Foreign tax credit", 1, "", flag="u    ", name="f1040sch3_ftc", form="f1040sch3"),
f1040sch3_dependent_care = cell("Dependent care expenses", 2, "", flag="u    ", name="f1040sch3_dependent_care", form="f1040sch3"),
f1040sch3_ed_credits = cell("Education credits via f8863", 3, "Cv('f8863_nonrefundable_credit')", flag="s_loans    ", name="f1040sch3_ed_credits", form="f1040sch3"),
f1040sch3_retirement_savings = cell("Retirement savings contribution credits", 4, "", flag="u    ", name="f1040sch3_retirement_savings", form="f1040sch3"),
f1040sch3_elderly_disabled_credits = cell("Elderly or disabled credit from Schedule R", 6.4, "", flag="u    ", name="f1040sch3_elderly_disabled_credits", form="f1040sch3"),
f1040sch3_alt_motor_vehicle = cell("Alternative motor vehicle credit", 6.5, "", flag="u    ", name="f1040sch3_alt_motor_vehicle", form="f1040sch3"),
f1040sch3_plug_in_motor_vehicle = cell("Qualified plug-in motor vehicle credit", 6.6, "", flag="u    ", name="f1040sch3_plug_in_motor_vehicle", form="f1040sch3"),
f1040sch3_nonrefundable_total = cell("Total nonrefundable credits", 8, "Cv('f1040sch3_ftc')+Cv('f1040sch3_dependent_care')+Cv('f1040sch3_retirement_savings') +Cv('f1040sch3_elderly_disabled_credits') + Cv('f1040sch3_alt_motor_vehicle') + Cv('f1040sch3_plug_in_motor_vehicle') +Cv('f1040sch3_ed_credits')    ", flag="", name="f1040sch3_nonrefundable_total", form="f1040sch3"),
student_loan_ws_1040_student_loan_interest = cell("Interest you paid in 2021 on qualified student loans", 1, "", flag="u s_loans    ", name="student_loan_ws_1040_student_loan_interest", form="student_loan_ws_1040"),
student_loan_ws_1040_loans_maxed = cell("Student loan interest, maxed at $2,500", 1.1, "min(Cv('student_loan_ws_1040_student_loan_interest'), 2500)", flag="s_loans    ", name="student_loan_ws_1040_loans_maxed", form="student_loan_ws_1040"),
student_loan_ws_1040_phase_out_pct = cell("total income minus phase-out limit", 6, "min(1,             max(Cv('f1040_total_in') - Cv('f1040sch1_subtractions_from_income_wo_student_loans')                 - ((155000) if (fstatus()=='married filing jointly') else (75000 )) , 0)/((30000) if (fstatus()=='married filing jointly') else (15000 )) )", flag="s_loans    ", name="student_loan_ws_1040_phase_out_pct", form="student_loan_ws_1040"),
student_loan_ws_1040_phased_out_loans = cell("phased-out loans", 8, "Cv('student_loan_ws_1040_loans_maxed')*Cv('student_loan_ws_1040_phase_out_pct')/15000.", flag="s_loans    ", name="student_loan_ws_1040_phased_out_loans", form="student_loan_ws_1040"),
student_loan_ws_1040_final_credit = cell("Student loan interest credit", 9, "max(Cv('student_loan_ws_1040_loans_maxed') - Cv('student_loan_ws_1040_phased_out_loans'), 0)", flag="s_loans    ", name="student_loan_ws_1040_final_credit", form="student_loan_ws_1040"),
ctc_sch8812_I_two_thousand_per_child = cell("$2,000 per child under 17 w/an SSN ($500 for other children unimplemented)", 5, "thousandkids()", flag="kids    ", name="ctc_sch8812_I_two_thousand_per_child", form="ctc_sch8812_I"),
ctc_sch8812_I_ctc_subtraction = cell("5% of AGI minus a filing-status dependent number", 11, "ctc_status(Cv('f1040_AGI'))", flag="kids    ", name="ctc_sch8812_I_ctc_subtraction", form="ctc_sch8812_I"),
ctc_sch8812_I_credit_remaining = cell("$2,000 per child minus the subtraction", 12, "max(Cv('ctc_sch8812_I_two_thousand_per_child') - Cv('ctc_sch8812_I_ctc_subtraction'), 0)", flag="kids    ", name="ctc_sch8812_I_credit_remaining", form="ctc_sch8812_I"),
ctc_sch8812_I_tax_minus_some_credits = cell("                Calculated tax minus some credits", 13.1, "Cv('f1040_base_tax')          - Cv('f1040sch3_ftc') - Cv('f1040sch3_dependent_care')- Cv('f1040sch3_ed_credits')          - Cv('f1040sch3_retirement_savings') - Cv('f1040sch3_elderly_disabled_credits')          - Cv('f1040sch3_alt_motor_vehicle')  - Cv('f1040sch3_plug_in_motor_vehicle')", flag="kids    ", name="ctc_sch8812_I_tax_minus_some_credits", form="ctc_sch8812_I"),
ctc_sch8812_I_ctc = cell("Nonrefundable child tax credit", 10, "min(Cv('ctc_sch8812_I_tax_minus_some_credits'), Cv('ctc_sch8812_I_credit_remaining'))", flag="kids    ", name="ctc_sch8812_I_ctc", form="ctc_sch8812_I"),
ctc_sch8812_IIA_unused_ctc = cell("CTC not used", 16, "max(0, Cv('ctc_sch8812_I_credit_remaining') - Cv('ctc_sch8812_I_ctc'))", flag="kids     ", name="ctc_sch8812_IIA_unused_ctc", form="ctc_sch8812_IIA"),
ctc_sch8812_IIA_seventeen_kids = cell("$1,700 per kid", 16.1, "seventeenkids()", flag="kids    ", name="ctc_sch8812_IIA_seventeen_kids", form="ctc_sch8812_IIA"),
ctc_sch8812_IIA_limited_unused = cell("Limited unused CTC", 17, "min(Cv('ctc_sch8812_IIA_unused_ctc'), Cv('ctc_sch8812_IIA_seventeen_kids'))", flag="kids    ", name="ctc_sch8812_IIA_limited_unused", form="ctc_sch8812_IIA"),
ctc_sch8812_IIA_scaled_earned_income = cell("15 percent of earned income-2500", 19, "max(0, 0.15*(Cv('f1040_wages')-2500))", flag="kids    ", name="ctc_sch8812_IIA_scaled_earned_income", form="ctc_sch8812_IIA"),
ctc_sch8812_IIA_ss_and_medicare_withheld = cell("Social security and medicare withheld on W-2 lines 4 and 6", 11, "", flag="u kids    ", name="ctc_sch8812_IIA_ss_and_medicare_withheld", form="ctc_sch8812_IIA"),
ctc_sch8812_IIA_refundable_ctc = cell("Refundable child tax credit", 15, "actc(Cv('ctc_sch8812_IIA_limited_unused'), Cv('ctc_sch8812_IIA_scaled_earned_income'),Cv('f1040sch1_self_employment_deductible') + Cv('ctc_sch8812_IIA_ss_and_medicare_withheld'), Cv('f1040_eitc'))", flag="kids    ", name="ctc_sch8812_IIA_refundable_ctc", form="ctc_sch8812_IIA"),
f1040_tax_refund_ws_last_year_refund = cell("Enter the income tax refund from Form(s) 1099G, up to income taxes on last year's Schedule A", 1, "", flag="u ly_refund    ", name="f1040_tax_refund_ws_last_year_refund", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_last_year_5d = cell("Enter line 29 of your 2020 Schedule A", 1, "", flag="u ly_refund    ", name="f1040_tax_refund_ws_last_year_5d", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_last_year_limited_deductions = cell("Enter line 5e of your 2020 Schedule A", 1.3, "", flag="u ly_refund    ", name="f1040_tax_refund_ws_last_year_limited_deductions", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_last_year_reduced = cell("Last year's deductions, maybe reduced", 2, "max(Cv('f1040_tax_refund_ws_last_year_5d')-Cv('f1040_tax_refund_ws_last_year_limited_deductions'), 0)", flag="ly_refund    ", name="f1040_tax_refund_ws_last_year_reduced", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_last_year_post_limit = cell("Last year's tax deducted, limited", 3, "max(Cv('f1040_tax_refund_ws_last_year_refund')-Cv('f1040_tax_refund_ws_last_year_reduced'), 0)", flag="ly_refund    ", name="f1040_tax_refund_ws_last_year_post_limit", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_last_year_total_deductions = cell("Last year's itemized deductions", 4, "", flag="u ly_refund    ", name="f1040_tax_refund_ws_last_year_total_deductions", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_almost_std_deduction = cell("Last year's standard deduction (under your current status)", 5, "((25900) if (fstatus()=='married filing jointly') else (((19400) if (fstatus()=='head of household') else (12950 )) )) ", flag="ly_refund    ", name="f1040_tax_refund_ws_almost_std_deduction", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_srblind = cell("Senior or blind exemption (blind UI; married filing jointly PI)", 6, "((Situation(over_65)==1)+(Situation(spouse_over_65)==1))*                   ((1400) if (fstatus()=='married filing separately') else (((1400) if (fstatus()=='married filing jointly') else (1750 )) )) ", flag="ly_refund    ", name="f1040_tax_refund_ws_srblind", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_itemized_over_std = cell("Itemized deduction minus standard for last year", 6.5, "max(Cv('f1040_tax_refund_ws_last_year_total_deductions') - Cv('f1040_tax_refund_ws_almost_std_deduction') - Cv('f1040_tax_refund_ws_srblind'), 0)", flag="ly_refund    ", name="f1040_tax_refund_ws_itemized_over_std", form="f1040_tax_refund_ws"),
f1040_tax_refund_ws_taxable_refund = cell("Taxable tax refund", 7, "min(Cv('f1040_tax_refund_ws_itemized_over_std'), Cv('f1040_tax_refund_ws_last_year_post_limit'))", flag="ly_refund    ", name="f1040_tax_refund_ws_taxable_refund", form="f1040_tax_refund_ws"),
qualified_dividends_ws_qualified_dividends_and_gains = cell("Qualified dividends plus cap gains", 4, "Cv('f1040_qualified_dividends')+Cv('f1040_capital_gains')", flag="cap_gains    ", name="qualified_dividends_ws_qualified_dividends_and_gains", form="qualified_dividends_ws"),
qualified_dividends_ws_income_minus_gains = cell("Income minus gains", 5, "Cv('f1040_taxable_income')-Cv('qualified_dividends_ws_qualified_dividends_and_gains')", flag="cap_gains    ", name="qualified_dividends_ws_income_minus_gains", form="qualified_dividends_ws"),
qualified_dividends_ws_limitation = cell("Limitation", 6, "((59750) if (fstatus()=='head of household') else (((89250) if (fstatus()=='married filing jointly') else (44625 )) )) ", flag="cap_gains    ", name="qualified_dividends_ws_limitation", form="qualified_dividends_ws"),
qualified_dividends_ws_limited_income = cell("Limited income", 7, "min(Cv('f1040_taxable_income'), Cv('qualified_dividends_ws_limitation'))", flag="cap_gains    ", name="qualified_dividends_ws_limited_income", form="qualified_dividends_ws"),
qualified_dividends_ws_alt_limited_income = cell("Limited income again", 8, "min(Cv('qualified_dividends_ws_limited_income'), Cv('qualified_dividends_ws_income_minus_gains'))", flag="cap_gains    ", name="qualified_dividends_ws_alt_limited_income", form="qualified_dividends_ws"),
qualified_dividends_ws_untaxed = cell("Untaxed portion", 9, "Cv('qualified_dividends_ws_limited_income') - Cv('qualified_dividends_ws_alt_limited_income')", flag="cap_gains    ", name="qualified_dividends_ws_untaxed", form="qualified_dividends_ws"),
qualified_dividends_ws_min_ded_or_gains_minus_zero = cell("Remove untaxed from income", 12, "min(Cv('f1040_taxable_income'), Cv('qualified_dividends_ws_income_minus_gains')) - Cv('qualified_dividends_ws_untaxed')", flag="cap_gains    ", name="qualified_dividends_ws_min_ded_or_gains_minus_zero", form="qualified_dividends_ws"),
qualified_dividends_ws_relimited_qualified = cell("qualified gains re-limited", 13, "min(Cv('qualified_dividends_ws_min_ded_or_gains_minus_zero'),                        max( min(((523050) if (fstatus()=='single') else (((276900) if (fstatus()=='married filing separately') else (((553850) if (fstatus()=='married filing jointly') else (492300 )) )) )) ,                 Cv('f1040_taxable_income')) - (Cv('qualified_dividends_ws_income_minus_gains') + Cv('qualified_dividends_ws_untaxed')) , 0))", flag="cap_gains    ", name="qualified_dividends_ws_relimited_qualified", form="qualified_dividends_ws"),
qualified_dividends_ws_income_minus_fifteen = cell("Gains minus 15% taxed part", 20, "min(Cv('f1040_taxable_income'), Cv('qualified_dividends_ws_qualified_dividends_and_gains')) - (Cv('qualified_dividends_ws_untaxed') + Cv('qualified_dividends_ws_relimited_qualified'))", flag="cap_gains    ", name="qualified_dividends_ws_income_minus_fifteen", form="qualified_dividends_ws"),
qualified_dividends_ws_nongains_tax = cell("Tax on income without qualified gains", 22, "tax_calc(Cv('qualified_dividends_ws_income_minus_gains'))", flag="cap_gains    ", name="qualified_dividends_ws_nongains_tax", form="qualified_dividends_ws"),
qualified_dividends_ws_total_tax = cell("Total tax including qualified gains discounts", 23, "Cv('qualified_dividends_ws_relimited_qualified')*0.15 +Cv('qualified_dividends_ws_income_minus_fifteen')*0.20 + Cv('qualified_dividends_ws_nongains_tax')", flag="cap_gains    ", name="qualified_dividends_ws_total_tax", form="qualified_dividends_ws"),
f6251_taxable_income = cell("AGI minus deductions", 1, "Cv('f1040_AGI') - Cv('f1040_deductions') - Cv('f1040_qbi')", flag="itemizing", name="f6251_taxable_income", form="f6251"),
f6251_taxes_deducted = cell("State/local/other deducted on Schedule A or std deduction", 2.05, "((Cv('f1040_sched_a_total_taxes_deducted')) if (Cv('f1040_sched_a_total_itemized_deductions')>0) else (Cv('f1040_std_deduction')))", flag="itemizing", name="f6251_taxes_deducted", form="f6251"),
f6251_amt_refund_deduction = cell("Tax refund from Form 1040, Sch A L7 or 1040 L12", 2.1, "Cv('f1040_tax_refund_ws_taxable_refund')", flag="itemizing    ", name="f6251_amt_refund_deduction", form="f6251"),
f6251_nold = cell("NOLD (UI)", 2.25, "0", flag="itemizing", name="f6251_nold", form="f6251"),
f6251_amt_income = cell("Alternative minimum taxable income. (PI)", 4, "Cv('f6251_taxable_income') + Cv('f6251_taxes_deducted') + Cv('f6251_amt_refund_deduction') + Cv('f6251_nold') + 0", flag="itemizing    ", name="f6251_amt_income", form="f6251"),
f6251_amt_exemption = cell("AMT exemption (phase-out not implemented)", 5, "get_amt_exemption(Cv('f6251_amt_income'))", flag="itemizing    ", name="f6251_amt_exemption", form="f6251"),
f6251_amt_in_minus_exemption = cell("AMT income minus exemption", 6, "max(0, Cv('f6251_amt_income')-Cv('f6251_amt_exemption'))", flag="itemizing    ", name="f6251_amt_in_minus_exemption", form="f6251"),
f6251_amt_preftc = cell("Tentative AMT pre-FTC (Simplified)", 7, "get_tamt(Cv('f6251_amt_in_minus_exemption'))", flag="itemizing    ", name="f6251_amt_preftc", form="f6251"),
f6251_amt_ftc = cell("AMT foreign tax credit (UI)", 8, "0", flag="itemizing    ", name="f6251_amt_ftc", form="f6251"),
f6251_amt_tentative = cell("Tentative AMT", 9, "Cv('f6251_amt_preftc')-Cv('f6251_amt_ftc')", flag="itemizing    ", name="f6251_amt_tentative", form="f6251"),
f6251_tax_from_1040 = cell("Tax from F1040 (and f8978 losses, not implemented)", 10, "Cv('f1040_base_tax')+Cv('f1040sch2_credit_repayment')-Cv('f1040sch3_ftc')", flag="itemizing    ", name="f6251_tax_from_1040", form="f6251"),
f6251_amt = cell("AMT", 11, "max(Cv('f6251_amt_tentative') - Cv('f6251_tax_from_1040'), 0)", flag="itemizing    ", name="f6251_amt", form="f6251"),
f8582_ws1_8582_net_gain = cell("Net income", 0.1, "max(Cv('f1040_sched_e_rents_received') - Cv('f1040_sched_e_total_rental_expenses'), 0)", flag="have_rr    ", name="f8582_ws1_8582_net_gain", form="f8582"),
f8582_ws1_8582_net_loss = cell("Net loss", 0.2, "min(Cv('f1040_sched_e_rents_received') - Cv('f1040_sched_e_total_rental_expenses'), 0)", flag="have_rr    ", name="f8582_ws1_8582_net_loss", form="f8582"),
f8582_ws1_8582_prior_loss = cell("Prior year carryover real estate loss", 0.3, "", flag="u have_rr", name="f8582_ws1_8582_prior_loss", form="f8582"),
f8582_ws1_8582_d = cell("Unedited total gain or loss", 0.3, "Cv('f8582_ws1_8582_net_gain') + Cv('f8582_ws1_8582_net_loss') + Cv('f8582_ws1_8582_prior_loss') + 0", flag="have_rr    ", name="f8582_ws1_8582_d", form="f8582"),
f8582_div_85821 = cell(">>>>Part I        ", 0.9, "have_rr", flag="", name="f8582_div_85821", form="f8582"),
f8582_div_85822 = cell(">>>>Part II       ", 4.9, "have_rr", flag="", name="f8582_div_85822", form="f8582"),
f8582_f8582_net_in = cell("Net income", 1.0, "Cv('f8582_ws1_8582_net_gain')", flag="have_rr    ", name="f8582_f8582_net_in", form="f8582"),
f8582_f8582_net_loss = cell("Net loss", 1.2, "Cv('f8582_ws1_8582_net_loss')", flag="have_rr    ", name="f8582_f8582_net_loss", form="f8582"),
f8582_f8582_carryover = cell("Prior year carryover", 1.4, "((Cv('f8582_ws1_8582_prior_loss')) if (Cv('f8582_ws1_8582_prior_loss') < 0) else (-Cv('f8582_ws1_8582_prior_loss')))", flag="have_rr    ", name="f8582_f8582_carryover", form="f8582"),
f8582_f8582_total_real_in = cell("Sum", 1.6, "Cv('f8582_f8582_net_in') + Cv('f8582_f8582_net_loss') + Cv('f8582_f8582_carryover') + 0", flag="have_rr    ", name="f8582_f8582_total_real_in", form="f8582"),
f8582_f8582_commercial_revitalization = cell("Commercial revitalization deductions (UI)", 2, "0", flag="have_rr    ", name="f8582_f8582_commercial_revitalization", form="f8582"),
f8582_f8582_passive_activities = cell("Active plus Passive activity income (UI)", 3, "Cv('f8582_f8582_total_real_in')", flag="have_rr    ", name="f8582_f8582_passive_activities", form="f8582"),
f8582_f8582_total_in = cell("Total in", 4, "Cv('f8582_f8582_total_real_in') + Cv('f8582_f8582_commercial_revitalization') + Cv('f8582_f8582_passive_activities') + 0", flag="have_rr    ", name="f8582_f8582_total_in", form="f8582"),
f8582_f8582_min = cell("the smaller of the loss on line 1d or the loss on line 4", 5, "max(min(Cv('f8582_f8582_total_real_in'),0), min(Cv('f8582_f8582_total_in'),0))", flag="have_rr    ", name="f8582_f8582_min", form="f8582"),
f8582_f8582_half = cell("Half of line 8, up to 25k", 9, "-min(25000, max(150000 - max(Cv('f1040_MAGI'), 0), 0)/2.0)", flag="have_rr    ", name="f8582_f8582_half", form="f8582"),
f8582_allowed_extra_real_losses = cell("Allowed above-passive real estate losses", 10, "max(Cv('f8582_f8582_min'), Cv('f8582_f8582_half'))", flag="have_rr    ", name="f8582_allowed_extra_real_losses", form="f8582"),
f8582_allowed_real_losses = cell("Total allowed real estate losses", 10, "Cv('f8582_allowed_extra_real_losses')- Cv('f8582_f8582_net_in')", flag="have_rr    ", name="f8582_allowed_real_losses", form="f8582"),
f8582_carryover_to_next_year = cell("Carry this over to next year", 10, "max(0,Cv('f8582_ws1_8582_prior_loss') + Cv('f8582_total_losses_8582'))", flag="have_rr    ", name="f8582_carryover_to_next_year", form="f8582"),
f8582_total_losses_8582 = cell("Total loss", 16, "((Cv('f8582_f8582_net_loss') - Cv('f8582_ws1_8582_prior_loss')) if (Cv('f8582_f8582_total_real_in')>0) else (min(Cv('f8582_allowed_real_losses'), 0)))", flag="have_rr    ", name="f8582_total_losses_8582", form="f8582"),
f8863_pt3_divider = cell(">>>>>>>>>>>> Part III first                                   ", 0, "0", flag="", name="f8863_pt3_divider", form="f8863"),
f8863_education_expenses_1 = cell("Education expenses (student 1)", 27, "", flag="u s_loans", name="f8863_education_expenses_1", form="f8863"),
f8863_scaled_education_expenses_1 = cell("Limited Education expenses (s1)", 28, "max(0.25*(min(Cv('f8863_education_expenses_1'), 4000)-2000),0) ", flag="s_loans", name="f8863_scaled_education_expenses_1", form="f8863"),
f8863_rescaled_education_expenses_1 = cell("Relimited Education expenses (s1)", 29, "((Cv('f8863_education_expenses_1')) if (Cv('f8863_education_expenses_1')<=2000) else (Cv('f8863_scaled_education_expenses_1')+2000))", flag="s_loans", name="f8863_rescaled_education_expenses_1", form="f8863"),
f8863_education_expenses_2 = cell("Education expenses (student 2)", 27, "", flag="u s_loans", name="f8863_education_expenses_2", form="f8863"),
f8863_scaled_education_expenses_2 = cell("Limited Education expenses (s2)", 28, "max(0.25*(min(Cv('f8863_education_expenses_2'), 4000)-2000),0) ", flag="s_loans", name="f8863_scaled_education_expenses_2", form="f8863"),
f8863_rescaled_education_expenses_2 = cell("Relimited Education expenses (s2)", 29, "((Cv('f8863_education_expenses_2')) if (Cv('f8863_education_expenses_2')<=2000) else (Cv('f8863_scaled_education_expenses_2')+2000))", flag="s_loans", name="f8863_rescaled_education_expenses_2", form="f8863"),
f8863_education_expenses_3 = cell("Education expenses (student 3)", 27, "", flag="u s_loans", name="f8863_education_expenses_3", form="f8863"),
f8863_scaled_education_expenses_3 = cell("Limited Education expenses (s3)", 28, "max(0,0.25*(min(Cv('f8863_education_expenses_3'), 4000)-2000),0) ", flag="s_loans", name="f8863_scaled_education_expenses_3", form="f8863"),
f8863_rescaled_education_expenses_3 = cell("Relimited Education expenses (s3)", 29, "((Cv('f8863_education_expenses_3')) if (Cv('f8863_education_expenses_3')<=2000) else (Cv('f8863_scaled_education_expenses_3')+2000))", flag="s_loans", name="f8863_rescaled_education_expenses_3", form="f8863"),
f8863_adjusted_qualified_expenses = cell("Total adjusted qualified expenses, all students", 31, "", flag="u s_loans", name="f8863_adjusted_qualified_expenses", form="f8863"),
f8863_pt1_divider = cell(">>>>>>>>>>>> Part I", 0, "Refundable                               ", flag="0", name="f8863_pt1_divider", form="f8863"),
f8863_total_limited_expenses = cell("Total limited expenses", 1, "Cv('f8863_rescaled_education_expenses_1') + Cv('f8863_rescaled_education_expenses_2') + Cv('f8863_rescaled_education_expenses_3') + 0", flag="s_loans", name="f8863_total_limited_expenses", form="f8863"),
f8863_baseline = cell("90 or 180k", 2, "((180000) if (fstatus()=='married filing jointly') else (90000 )) ", flag="s_loans", name="f8863_baseline", form="f8863"),
f8863_ninety_k_minus_agi = cell("Remaining after AGI subtraction", 4, "max(0, Cv('f8863_baseline') - Cv('f1040_AGI'))", flag="s_loans", name="f8863_ninety_k_minus_agi", form="f8863"),
f8863_fraction = cell("Fraction allowed", 6, "max(min(1, Cv('f8863_ninety_k_minus_agi')/((20000) if (fstatus()=='married filing jointly') else (10000 )) ), 0)", flag="s_loans", name="f8863_fraction", form="f8863"),
f8863_unscaled_credit = cell("Unscaled credit", 7, "Cv('f8863_total_limited_expenses')*Cv('f8863_fraction')", flag="s_loans", name="f8863_unscaled_credit", form="f8863"),
f8863_under_24 = cell("If you're under 24, 1", 7.5, "", flag="u s_loans", name="f8863_under_24", form="f8863"),
f8863_refundable_credit = cell("Refundable education credit", 8, "((Cv('f8863_unscaled_credit')*.4) if (Cv('f8863_under_24')<0) else (0))", flag="s_loans", name="f8863_refundable_credit", form="f8863"),
f8863_pt2_divider = cell(">>>>>>>>>>>> Part II", 8.5, "Nonrefundable                           ", flag="0", name="f8863_pt2_divider", form="f8863"),
f8863_remaining_credit = cell("Remaining tentative credit", 9, "Cv('f8863_unscaled_credit') - Cv('f8863_refundable_credit')", flag="s_loans", name="f8863_remaining_credit", form="f8863"),
f8863_aqe = cell("20% of Adjusted qualified expenses or 1k", 12, "min(1000, Cv('f8863_adjusted_qualified_expenses')) *.2", flag="s_loans", name="f8863_aqe", form="f8863"),
f8863_baseline2 = cell("67k or 134k", 13, "((180000) if (fstatus()=='married filing jointly') else (90000 )) ", flag="s_loans    ", name="f8863_baseline2", form="f8863"),
f8863_fraction2 = cell("Fraction allowed", 17, "max(min(1, (Cv('f8863_baseline2')-Cv('f1040_AGI'))/((20000) if (fstatus()=='married filing jointly') else (10000 )) ), 0)", flag="s_loans", name="f8863_fraction2", form="f8863"),
f8863_frac_allowed = cell("Fraction allowed", 18, "Cv('f8863_fraction2')*Cv('f8863_aqe')", flag="s_loans", name="f8863_frac_allowed", form="f8863"),
f8863_nonrefundable_credit = cell("Nonrefundable credit", 19, "min(Cv('f8863ws_diff'), Cv('f8863ws_credit_sum'))", flag="s_loans", name="f8863_nonrefundable_credit", form="f8863"),
f8863ws_credit_sum = cell("Lines 9 plus 18", 3, "Cv('f8863_remaining_credit')+Cv('f8863_frac_allowed')", flag="s_loans    ", name="f8863ws_credit_sum", form="f8863ws"),
f8863ws_tax = cell("Tax minus some credits from 1040", 4, "Cv('f1040_tax_plus_amt_and_repayment')", flag="s_loans    ", name="f8863ws_tax", form="f8863ws"),
f8863ws_other_credits = cell("FTC plus child care plus elderly credit", 5, "Cv('f1040sch3_ftc') + Cv('f1040sch3_dependent_care')+ Cv('f1040sch3_elderly_disabled_credits')", flag="s_loans    ", name="f8863ws_other_credits", form="f8863ws"),
f8863ws_diff = cell("Tax minus credits", 6, "max(0, Cv('f8863ws_tax')-Cv('f8863ws_other_credits'))", flag="s_loans    ", name="f8863ws_diff", form="f8863ws"),
f1040_sched_a_medical_expenses = cell("Medical and dental expenses", 1, "", flag="u itemizing", name="f1040_sched_a_medical_expenses", form="f1040_sched_a"),
f1040_sched_a_agi_scaled = cell("AGI scaled", 3, "Cv('f1040_AGI')* ((.075) if (Situation(over_65)+Situation(spouse_over_65)) else (.1))        ", flag="itemizing    ", name="f1040_sched_a_agi_scaled", form="f1040_sched_a"),
f1040_sched_a_excess_medical = cell("Medical expenses minus fraction of AGI", 4, "max(Cv('f1040_sched_a_medical_expenses') - Cv('f1040_sched_a_agi_scaled'), 0)", flag="itemizing    ", name="f1040_sched_a_excess_medical", form="f1040_sched_a"),
f1040_sched_a_local_taxes = cell("State/local Income OR general sales tax", 5, "", flag="u itemizing    ", name="f1040_sched_a_local_taxes", form="f1040_sched_a"),
f1040_sched_a_real_estate_taxes = cell("Real estate taxes", 5.1, "", flag="u itemizing    ", name="f1040_sched_a_real_estate_taxes", form="f1040_sched_a"),
f1040_sched_a_property_taxes = cell("Personal property taxes", 5.2, "", flag="u itemizing    ", name="f1040_sched_a_property_taxes", form="f1040_sched_a"),
f1040_sched_a_salt_capped = cell("State/local/real estate taxes, capped", 7, "min(Cv('f1040_sched_a_local_taxes') + Cv('f1040_sched_a_real_estate_taxes') + Cv('f1040_sched_a_property_taxes') + 0, ((5000) if (fstatus()=='maried filing separately') else (10000 )) )        ", flag="itemizing    ", name="f1040_sched_a_salt_capped", form="f1040_sched_a"),
f1040_sched_a_other_taxes = cell("Other taxes", 6, "", flag="u itemizing    ", name="f1040_sched_a_other_taxes", form="f1040_sched_a"),
f1040_sched_a_total_taxes_deducted = cell("Total taxes paid to be deducted", 7, "min(10000, Cv('f1040_sched_a_salt_capped') + Cv('f1040_sched_a_other_taxes') + 0)", flag="itemizing    ", name="f1040_sched_a_total_taxes_deducted", form="f1040_sched_a"),
f1040_sched_a_reported_mort_interest = cell("Home mortgage interest/points reported on Form 1099", 8, "", flag="u itemizing mort    ", name="f1040_sched_a_reported_mort_interest", form="f1040_sched_a"),
f1040_sched_a_unreported_mort_interest = cell("Home mortgage interest not reported on Form 1098", 8.1, "", flag="u itemizing mort    ", name="f1040_sched_a_unreported_mort_interest", form="f1040_sched_a"),
f1040_sched_a_unreported_mort_points = cell("Home mortgage points not reported on Form 1098", 8.2, "", flag="u itemizing mort    ", name="f1040_sched_a_unreported_mort_points", form="f1040_sched_a"),
f1040_sched_a_investment_interest = cell("Investment interest", 9, "", flag="u itemizing    ", name="f1040_sched_a_investment_interest", form="f1040_sched_a"),
f1040_sched_a_total_interest_deduction = cell("Total interest to deduct", 10, "Cv('f1040_sched_a_reported_mort_interest') + Cv('f1040_sched_a_unreported_mort_interest') + Cv('f1040_sched_a_unreported_mort_points') + Cv('f1040_sched_a_investment_interest') + 0", flag="itemizing    ", name="f1040_sched_a_total_interest_deduction", form="f1040_sched_a"),
f1040_sched_a_charity_cash = cell("Gifts to charity by cash or check", 11, "", flag="u itemizing    ", name="f1040_sched_a_charity_cash", form="f1040_sched_a"),
f1040_sched_a_charity_noncash = cell("Gifts to charity other than by cash or check", 12, "", flag="u itemizing    ", name="f1040_sched_a_charity_noncash", form="f1040_sched_a"),
f1040_sched_a_charity_carryover = cell("Gifts to charity, carryover from prior year", 13, "", flag="u itemizing    ", name="f1040_sched_a_charity_carryover", form="f1040_sched_a"),
f1040_sched_a_charity_total = cell("Gifts to charity, total", 14, "Cv('f1040_sched_a_charity_cash') + Cv('f1040_sched_a_charity_noncash') + Cv('f1040_sched_a_charity_carryover') + 0", flag="itemizing    ", name="f1040_sched_a_charity_total", form="f1040_sched_a"),
f1040_sched_a_casualty_or_theft_losses = cell("Casualty and Theft Losses", 15, "", flag="u itemizing    ", name="f1040_sched_a_casualty_or_theft_losses", form="f1040_sched_a"),
f1040_sched_a_employee_expenses = cell("Unreimbursed employee expensesโjob travel, union dues, job education, etc.", 16.1, "", flag="u itemizing    ", name="f1040_sched_a_employee_expenses", form="f1040_sched_a"),
f1040_sched_a_tax_prep_fees = cell("Tax prep fees", 16.2, "", flag="u itemizing    ", name="f1040_sched_a_tax_prep_fees", form="f1040_sched_a"),
f1040_sched_a_other_work_expenses = cell("Other expensesโinvestment, safe deposit box, etc.", 16.3, "", flag="u itemizing    ", name="f1040_sched_a_other_work_expenses", form="f1040_sched_a"),
f1040_sched_a_expenses_minus_agi_slice = cell("Expenses minus fraction of AGI", 16.4, "max(Cv('f1040_sched_a_employee_expenses') + Cv('f1040_sched_a_tax_prep_fees') + Cv('f1040_sched_a_other_work_expenses') + 0 - (Cv('f1040_AGI')* 0.02), 0)", flag="itemizing    ", name="f1040_sched_a_expenses_minus_agi_slice", form="f1040_sched_a"),
f1040_sched_a_other_deductions = cell("Other deductions", 16.5, "", flag="u itemizing    ", name="f1040_sched_a_other_deductions", form="f1040_sched_a"),
f1040_sched_a_total_itemized_deductions = cell("Total itemized deductions", 29, "Cv('f1040_sched_a_excess_medical') + Cv('f1040_sched_a_total_taxes_deducted') + Cv('f1040_sched_a_total_interest_deduction') + Cv('f1040_sched_a_charity_total') + Cv('f1040_sched_a_casualty_or_theft_losses') + Cv('f1040_sched_a_expenses_minus_agi_slice') + Cv('f1040_sched_a_other_deductions') + 0", flag="itemizing    ", name="f1040_sched_a_total_itemized_deductions", form="f1040_sched_a"),
f1040_sched_c_gross_rcpts = cell("Gross Receipts", 1, "", flag="u self_emp", name="f1040_sched_c_gross_rcpts", form="f1040_sched_c"),
f1040_sched_c_returns_and_allowances = cell("Returns and allowances", 2, "", flag="u self_emp", name="f1040_sched_c_returns_and_allowances", form="f1040_sched_c"),
f1040_sched_c_cogs = cell("Cost of goods sold", 4, "", flag="u self_emp", name="f1040_sched_c_cogs", form="f1040_sched_c"),
f1040_sched_c_other_income = cell("Other income, including some federal credits", 6, "", flag="u self_emp", name="f1040_sched_c_other_income", form="f1040_sched_c"),
f1040_sched_c_gross_income = cell("Gross profits", 7, "Cv('f1040_sched_c_gross_rcpts') - Cv('f1040_sched_c_returns_and_allowances') - Cv('f1040_sched_c_cogs') + Cv('f1040_sched_c_other_income')", flag="self_emp    ", name="f1040_sched_c_gross_income", form="f1040_sched_c"),
f1040_sched_c_expenses = cell("Sum of all expenses (lines 8โ27)", 8, "", flag="u self_emp", name="f1040_sched_c_expenses", form="f1040_sched_c"),
f1040_sched_c_home_expenses = cell("Expense for business use of home", 30, "", flag="u self_emp", name="f1040_sched_c_home_expenses", form="f1040_sched_c"),
f1040_sched_c_net_pl = cell("Net Profit/loss", 31, "Cv('f1040_sched_c_gross_income') - Cv('f1040_sched_c_expenses') - Cv('f1040_sched_c_home_expenses')", flag="self_emp    ", name="f1040_sched_c_net_pl", form="f1040_sched_c"),
sched_se_in_from_sch_c = cell("Schedule C business income", 3, "Cv('f1040_sched_c_net_pl')", flag="self_emp    ", name="sched_se_in_from_sch_c", form="sched_se"),
sched_se_net_pl_reduced = cell("P/L slightly reduced", 4, "((Cv('sched_se_in_from_sch_c')*0.9235) if (Cv('sched_se_in_from_sch_c')>0) else (Cv('sched_se_in_from_sch_c')))", flag="self_emp    ", name="sched_se_net_pl_reduced", form="sched_se"),
sched_se_ss_wages = cell("Social Security wages and tips (W-2 boxes 3 plus 7)", 8, "", flag="u self_emp", name="sched_se_ss_wages", form="sched_se"),
sched_se_distance_to_max = cell("Distance to cap", 9, "max(0, 160200 - Cv('sched_se_ss_wages'))", flag="self_emp    ", name="sched_se_distance_to_max", form="sched_se"),
sched_se_twelve_pct = cell("12.4% of self-employment income, limited", 10, "min(Cv('sched_se_distance_to_max'), Cv('sched_se_net_pl_reduced'))*0.124", flag="self_emp    ", name="sched_se_twelve_pct", form="sched_se"),
sched_se_two_pct = cell("2.9% of self-employment income", 11, "0.029 * Cv('sched_se_net_pl_reduced')", flag="self_emp    ", name="sched_se_two_pct", form="sched_se"),
sched_se_se_tax = cell("Self-employment tax", 12, "Cv('sched_se_twelve_pct') + Cv('sched_se_two_pct')", flag="self_emp    ", name="sched_se_se_tax", form="sched_se"),
f1040_sched_e_rents_received = cell("Rents received", 3, "", flag="u have_rr", name="f1040_sched_e_rents_received", form="f1040_sched_e"),
f1040_sched_e_royalties_received = cell("Royalties received", 4, "", flag="u have_rr", name="f1040_sched_e_royalties_received", form="f1040_sched_e"),
f1040_sched_e_rental_advertising = cell("Advertising", 5, "", flag="u have_rr", name="f1040_sched_e_rental_advertising", form="f1040_sched_e"),
f1040_sched_e_rental_auto_and_travel = cell("Auto and travel", 6, "", flag="u have_rr", name="f1040_sched_e_rental_auto_and_travel", form="f1040_sched_e"),
f1040_sched_e_rental_cleaning_and_maintenance = cell("Cleaning and maintenance", 7, "", flag="u have_rr", name="f1040_sched_e_rental_cleaning_and_maintenance", form="f1040_sched_e"),
f1040_sched_e_rental_fees = cell("Commissions, Insurance, Professional and Mgmt fees", 8, "", flag="u have_rr", name="f1040_sched_e_rental_fees", form="f1040_sched_e"),
f1040_sched_e_rental_mortgage_interest = cell("Mortgage interest paid to banks, etc", 12, "", flag="u have_rr", name="f1040_sched_e_rental_mortgage_interest", form="f1040_sched_e"),
f1040_sched_e_rental_other_interest = cell("Other interest", 13, "", flag="u have_rr", name="f1040_sched_e_rental_other_interest", form="f1040_sched_e"),
f1040_sched_e_rental_repairs_supplies = cell("Repairs and supplies", 14, "", flag="u have_rr", name="f1040_sched_e_rental_repairs_supplies", form="f1040_sched_e"),
f1040_sched_e_rental_taxes = cell("Taxes", 16, "", flag="u have_rr", name="f1040_sched_e_rental_taxes", form="f1040_sched_e"),
f1040_sched_e_rental_utilities = cell("Utilities", 17, "", flag="u have_rr", name="f1040_sched_e_rental_utilities", form="f1040_sched_e"),
f1040_sched_e_rental_depreciation = cell("Depreciation expense or depletion", 18, "Cv('f4562_rental_property_depreciation')", flag="have_rr", name="f1040_sched_e_rental_depreciation", form="f1040_sched_e"),
f1040_sched_e_rental_other_expenses = cell("Other", 19, "", flag="u have_rr", name="f1040_sched_e_rental_other_expenses", form="f1040_sched_e"),
f1040_sched_e_royalty_expenses = cell("Other", 4.5, "", flag="u have_rr", name="f1040_sched_e_royalty_expenses", form="f1040_sched_e"),
f1040_sched_e_total_rental_expenses = cell("Total expenses", 20, "Cv('f1040_sched_e_rental_advertising') + Cv('f1040_sched_e_rental_auto_and_travel') + Cv('f1040_sched_e_rental_cleaning_and_maintenance') + Cv('f1040_sched_e_rental_fees') + Cv('f1040_sched_e_rental_mortgage_interest') + Cv('f1040_sched_e_rental_other_interest') + Cv('f1040_sched_e_rental_repairs_supplies') + Cv('f1040_sched_e_rental_taxes') + Cv('f1040_sched_e_rental_utilities') + Cv('f1040_sched_e_rental_depreciation') + Cv('f1040_sched_e_rental_other_expenses') + 0", flag="have_rr", name="f1040_sched_e_total_rental_expenses", form="f1040_sched_e"),
f1040_sched_e_net_rents = cell("Rents minus expenses", 21, "Cv('f1040_sched_e_rents_received') - Cv('f1040_sched_e_total_rental_expenses')", flag="have_rr    ", name="f1040_sched_e_net_rents", form="f1040_sched_e"),
f1040_sched_e_net_royalties = cell("Royalties minus expenses", 21.1, "Cv('f1040_sched_e_royalties_received') - Cv('f1040_sched_e_royalty_expenses')", flag="have_rr    ", name="f1040_sched_e_net_royalties", form="f1040_sched_e"),
f1040_sched_e_deductible_rr_losses = cell("Limited deductible rental real estate loss and/or prior year losses", 22, "Cv('f8582_total_losses_8582')", flag="have_rr    ", name="f1040_sched_e_deductible_rr_losses", form="f1040_sched_e"),
f1040_sched_e_post_8582_net_rents = cell("Rental profit or loss after line 22", 22.5, "((Cv('f1040_sched_e_net_rents') + Cv('f1040_sched_e_deductible_rr_losses')) if (Cv('f1040_sched_e_net_rents')>0) else (Cv('f1040_sched_e_deductible_rr_losses')))", flag="have_rr    ", name="f1040_sched_e_post_8582_net_rents", form="f1040_sched_e"),
f1040_sched_e_sched_e_income = cell("Positive RR Income (PI)", 24, "max(0,Cv('f1040_sched_e_post_8582_net_rents')) + max(0,Cv('f1040_sched_e_net_royalties'))", flag="have_rr    ", name="f1040_sched_e_sched_e_income", form="f1040_sched_e"),
f1040_sched_e_rr_losses = cell("Royalty losses plus possibly limited rental losses (PI)", 25, "min(0,Cv('f1040_sched_e_post_8582_net_rents')) + min(Cv('f1040_sched_e_net_royalties'),0)", flag="have_rr    ", name="f1040_sched_e_rr_losses", form="f1040_sched_e"),
f1040_sched_e_rr_income = cell("Total rents and royalties", 26, "Cv('f1040_sched_e_sched_e_income') + Cv('f1040_sched_e_rr_losses') + 0", flag="have_rr    ", name="f1040_sched_e_rr_income", form="f1040_sched_e"),
f4562_rental_property_value = cell("Rental property value, for 27.5yr straight line depreciation", 19, "", flag="u have_rr    ", name="f4562_rental_property_value", form="f4562"),
f4562_rental_property_depreciation = cell("Rental property depreciation", 19, "Cv('f4562_rental_property_value')/27.5", flag="have_rr    ", name="f4562_rental_property_depreciation", form="f4562"),
 )
